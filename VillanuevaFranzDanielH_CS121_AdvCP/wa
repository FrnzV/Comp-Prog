from abc import ABC, abstractmethod

# Abstract class BankAccount
class BankAccount(ABC):
    def __init__(self, account_number, balance=0):
        self._account_number = account_number
        self._balance = balance

    @property
    def account_number(self):
        return self._account_number

    @property
    def balance(self):
        return self._balance

    @abstractmethod
    def deposit(self, amount):
        pass

    @abstractmethod
    def withdraw(self, amount):
        pass

    @abstractmethod
    def display_account_type(self):
        pass


# Subclass CurrentAccount
class CurrentAccount(BankAccount):
    OVERDRAFT_LIMIT = -5000

    def __init__(self, account_number, balance=0):
        super().__init__(account_number, balance)

    def deposit(self, amount):
        self._balance += amount

    def withdraw(self, amount):
        if self._balance - amount >= CurrentAccount.OVERDRAFT_LIMIT:
            self._balance -= amount
        else:
            print("Withdrawal denied: Overdraft limit exceeded.")

    def display_account_type(self):
        return "Current Account"


# Subclass SavingsAccount
class SavingsAccount(BankAccount):
    def __init__(self, account_number, balance=0):
        super().__init__(account_number, balance)

    def deposit(self, amount):
        self._balance += amount

    def withdraw(self, amount):
        if self._balance >= amount:
            self._balance -= amount
        else:
            print("Withdrawal denied: Insufficient funds.")

    def display_account_type(self):
        return "Savings Account"


# Function to display account details
def print_account_details(account):
    print(f"Account Number: {account.account_number}")  # Uses the property
    print(f"Balance: {account.balance}")                # Uses the property
    print(f"Type: {account.display_account_type()}")
    print("-" * 30)


# Testing the implementation
if __name__ == "__main__":
    # Create accounts
    savings_one = SavingsAccount("G3759", 9000)
    savings_two = SavingsAccount("AB409", 2000)

    current_one = CurrentAccount("PL891", -1000)
    current_two = CurrentAccount("IQ134", 4000)

    # Perform operations
    savings_one.deposit(1000)
    savings_one.withdraw(5000)

    savings_two.deposit(500)
    savings_two.withdraw(3000)

    current_one.withdraw(5000)  # Should exceed overdraft limit
    current_two.deposit(1000)

    # Display details
    print_account_details(savings_one)
    print_account_details(savings_two)
    print_account_details(current_one)
    print_account_details(current_two)
